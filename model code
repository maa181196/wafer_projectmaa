import pandas as pd
import mysql.connector as connection
import pandas as pd
import logging as lg
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from kneed import KneeLocator
import file_operations




def get_data():
    try:
        lg.basicConfig(filename='get_data',level=lg.INFO, format ='%(asctime)s %(message)s')
        lg.info("the exceution will be start from here")
        mydb = connection.connect(host="localhost",user="root", passwd="abcd@1234",use_pure=True)
        cursor =mydb.cursor()
        query1 ='use wafer_project'
        cursor.execute(query1)
        lg.info("using wafer_project database")
        mydb = connection.connect(host="localhost",user="root", passwd="abcd@1234",use_pure=True)
        data =pd.read_sql("select * from wafer_project.wafer_data",mydb)
        lg.info("data upload")
        return data
    except Exception as e:
        print ("you can check in your log if your code will fail")
        lg.error("error has occured")
        lg.exception(str(e))
        
        
        
def listing_the_column_with_having_same_value():
    lg.basicConfig(filename='column with std 0.log',level=lg.INFO, format ='%(asctime)s %(message)s')
    lg.info("the exceution will be start from here")
    try:
        data =get_data() # function creaeted
        if type(data)==pd.DataFrame:
            column_with_same_value =[]
            count=0
            columns =data.columns
            properties =data.describe()
            for i in columns:
                if properties[i]['std']==0:
                    column_with_same_value.append(i)
                    count+=1
                    lg.info("data inserted" ,count)
                else:
                    pass
            lg.info("this is your useless columns:" ,column_with_same_value)
                
        else:
            lg.info("guys comman yaar check your dataset")
            pass
        lg.info("there the useless columns:",column_with_same_value)
        return column_with_same_value
    except Exception as e:
        print ("you can check in your log if your code will fail")
        lg.error("error has occured")
        lg.exception(str(e))
     
     
     
def final_data():
    lg.basicConfig(filename='get_data',level=lg.INFO, format ='%(asctime)s %(message)s')
    lg.info("the exceution will be start from here")
    try:
        data =get_data()
        columns =listing_the_column_with_having_same_value()
        data =data.drop(columns,axis=1)
        lg.info("columns deleted ")
        return data
    except Exception as e:
        print ("you can check in your log if your code will fail")
        lg.error("error has occured")
        lg.exception(str(e))
    
    
  def label_sepeataion(label):
    lg.basicConfig(filename='featur_label_seperation.log',level=lg.INFO, format ='%(asctime)s %(message)s')
    lg.info("the exceution will be start from here")
    try:
        data =get_data() # get data funstion created which with fetch from MYSQL
        lg.info("data:" ,data)
        if type(data)==pd.DataFrame:
            columns=listing_the_column_with_having_same_value() # function created
            lg.info("columns: ", columns )
            data =data.drop(columns, axis =1)
            if type(label)==str:
                x=data.drop(label,axis=1)
                lg.info("feature data seperate")
                y=data[label]
                lg.info("lable data created")
            else:
                lg.info("it should be string")
                pass
        else:
            lg.info("check your dataset as it is not in right format")
            pass
        lg.info("feature data:",x)
        lg.info("label data:",y)
        return x,y
    except Exception as e:
        print ("you can check in your log if your code will fail")
        lg.error("error has occured")
        lg.exception(str(e))
        
        
        
 def elbow_plot():
    lg.basicConfig(filename='elbow_plot.log',level=lg.INFO, format ='%(asctime)s %(message)s')
    lg.info("the exceution will be start from here")
    try:
        data =final_data()
        lg.info("data:",data)
        wcss=[]
        for i in range(1,12):
            kmeans=KMeans(n_clusters=i,init='k-means++',random_state=42) # initializing the KMeans object
            kmeans.fit(data) # fitting the data to the KMeans Algorithm
            wcss.append(kmeans.inertia_)
        plt.plot(range(1,12),wcss) # creating the graph between WCSS and the number of clusters
        plt.title('The Elbow Method')
        plt.xlabel('Number of clusters')
        plt.ylabel('WCSS')
       #plt.show()
       # plt.savefig('preprocessing_data/K-Means_Elbow.PNG') # saving the elbow plot locally
        kn = KneeLocator(range(1, 12), wcss, curve='convex', direction='decreasing')
        return kn.knee
    except Exception as e:
        print ("you can check in your log if your code will fail")
        lg.error("error has occured")
        lg.exception(str(e))
